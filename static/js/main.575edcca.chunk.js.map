{"version":3,"sources":["Tictactoe.js","App.js","reportWebVitals.js","index.js"],"names":["TicTacToe","useState","turn","setTurn","Array","fill","cells","setCells","winner","setWinner","handleClick","num","squares","combos","across","down","diagnol","combo","forEach","pattern","checkForWinner","alert","Cell","onClick","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQA8GeA,EA3GG,WACjB,MAAwBC,mBAAS,KAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAASG,MAAM,GAAGC,KAAK,KAAjD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BN,qBAA5B,mBAAOO,EAAP,KAAeC,EAAf,KAsCMC,EAAc,SAACC,GACpB,GAAmB,KAAfL,EAAMK,GAAV,CAKA,IAAIC,EAAO,YAAON,GAEL,MAATJ,GACHU,EAAQD,GAAO,IACfR,EAAQ,OAERS,EAAQD,GAAO,IACfR,EAAQ,MAjDa,SAACS,GACvB,IAAIC,EAAS,CACZC,OAAQ,CACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAERC,KAAM,CACL,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAERC,QAAS,CACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAIT,IAAK,IAAIC,KAASJ,EACjBA,EAAOI,GAAOC,SAAQ,SAACC,GAEG,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KAIhBP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KACxCP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KAExCV,EAAUG,EAAQO,EAAQ,QAsB7BC,CAAeR,GACfL,EAASK,QAfRS,MAAM,oBAuBFC,EAAO,SAAC,GAAa,IAAXX,EAAU,EAAVA,IACf,OAAO,oBAAIY,QAAS,kBAAMb,EAAYC,IAA/B,SAAqC,6BAAKL,EAAMK,QAGxD,OACC,sBAAKa,UAAU,YAAf,UACC,kCACC,wCAAWtB,KACX,kCACC,+BACC,cAACoB,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,OAEZ,+BACC,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,OAEZ,+BACC,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,aAIL,qBAAKa,UAAU,SAAf,SACRhB,GACA,mCACC,+BAAKA,EAAL,yBAKO,qBAAKgB,UAAU,SAAf,SACA,wBAAQD,QAAS,kBAvC3Bd,EAAU,WACVF,EAASH,MAAM,GAAGC,KAAK,MAsCb,2BC3FGoB,MARf,WACE,OACE,qBAAKD,UAAU,MAAf,SACE,cAAC,EAAD,OCISE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.575edcca.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './tic.css';\r\n\r\nconst TicTacToe = () => {\r\n\tconst [turn, setTurn] = useState('x');\r\n\tconst [cells, setCells] = useState(Array(9).fill(''));\r\n\tconst [winner, setWinner] = useState();\r\n\r\n\tconst checkForWinner = (squares) => {\r\n\t\tlet combos = {\r\n\t\t\tacross: [\r\n\t\t\t\t[0, 1, 2],\r\n\t\t\t\t[3, 4, 5],\r\n\t\t\t\t[6, 7, 8],\r\n\t\t\t],\r\n\t\t\tdown: [\r\n\t\t\t\t[0, 3, 6],\r\n\t\t\t\t[1, 4, 7],\r\n\t\t\t\t[2, 5, 8],\r\n\t\t\t],\r\n\t\t\tdiagnol: [\r\n\t\t\t\t[0, 4, 8],\r\n\t\t\t\t[2, 4, 6],\r\n\t\t\t],\r\n\t\t};\r\n\r\n\t\tfor (let combo in combos) {\r\n\t\t\tcombos[combo].forEach((pattern) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tsquares[pattern[0]] === '' ||\r\n\t\t\t\t\tsquares[pattern[1]] === '' ||\r\n\t\t\t\t\tsquares[pattern[2]] === ''\r\n\t\t\t\t) {\r\n\t\t\t\t\t// do nothing\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tsquares[pattern[0]] === squares[pattern[1]] &&\r\n\t\t\t\t\tsquares[pattern[1]] === squares[pattern[2]]\r\n\t\t\t\t) {\r\n\t\t\t\t\tsetWinner(squares[pattern[0]]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleClick = (num) => {\r\n\t\tif (cells[num] !== '') {\r\n\t\t\talert('already clicked');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet squares = [...cells];\r\n\r\n\t\tif (turn === 'x') {\r\n\t\t\tsquares[num] = 'x';\r\n\t\t\tsetTurn('o');\r\n\t\t} else {\r\n\t\t\tsquares[num] = 'o';\r\n\t\t\tsetTurn('x');\r\n\t\t}\r\n\r\n\t\tcheckForWinner(squares);\r\n\t\tsetCells(squares);\r\n\t};\r\n\r\n\tconst handleRestart = () => {\r\n\t\tsetWinner(null);\r\n\t\tsetCells(Array(9).fill(''));\r\n\t};\r\n\r\n\tconst Cell = ({ num }) => {\r\n\t\treturn <td onClick={() => handleClick(num)}><h1>{cells[num]}</h1></td>;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t<table>\r\n\t\t\t\t<h1>Turn: {turn}</h1>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<Cell num={0} />\r\n\t\t\t\t\t\t<Cell num={1} />\r\n\t\t\t\t\t\t<Cell num={2} />\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<Cell num={3} />\r\n\t\t\t\t\t\t<Cell num={4} />\r\n\t\t\t\t\t\t<Cell num={5} />\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<Cell num={6} />\r\n\t\t\t\t\t\t<Cell num={7} />\r\n\t\t\t\t\t\t<Cell num={8} />\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n            <div className=\"winner\">   \r\n\t\t\t{winner && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<h1>{winner} is the winner!</h1>   \r\n\t\t\t\t\t\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n            </div>\r\n            <div className=\"button\">\r\n            <button onClick={() => handleRestart()}>Restart</button>\r\n            </div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TicTacToe;\r\n\r\n\r\n// const TicTacToe = () => {\r\n// const [turn , setTurn] =useState('x');\r\n\r\n// const [cells , setCells] = useState(Array(9).fill(\" \"));\r\n// const [winner , setWinner] = useState();\r\n// const checkForWinner = (square) => {\r\n//     let combos= {\r\n//         across: [[0,1,2],[3,4,5],[6,7,8],],\r\n//         down: [[0,3,6],[1,4,7],[2,5,8],],\r\n//         digonal:[[0,4,8],[2,4,6],],\r\n\r\n//     };\r\n//     for(let combo in combos){\r\n//        combos[combo].forEach((pattern) => {\r\n//            if(\r\n//                square[pattern[0]]=== \"\" || \r\n//                square[pattern[1]]=== \"\" || \r\n//                square[pattern[2]]=== \"\" \r\n//            ){      }\r\n//            else if(square[pattern[0]]===square[pattern[1]] &&\r\n//             square[pattern[1]]===square[pattern[2]]  ){\r\n//                setWinner(square[pattern[0]]);\r\n//             }\r\n//        } ) \r\n//     }\r\n// }\r\n\r\n\r\n// const Cell = ({num}) => {\r\n//     return <td onClick={() => {handler(num)}}   ><h1>{cells[num]}</h1></td>\r\n// }\r\n// const handler= (num) =>{\r\n// if(cells[num]!== \" \"){\r\n//     alert(\"cheater!!!\");\r\n//     return;\r\n// }\r\n\r\n\r\n// let square =[...cells]\r\n//      if(turn===\"x\"){\r\n//          square[num]='x';\r\n//      setTurn(\"o\")\r\n//      }\r\n//      else{\r\n//         square[num]='o';\r\n//          setTurn('x')\r\n//      }\r\n\r\n//      checkForWinner(square);\r\n//      setCells(square);\r\n//     //  console.log(square);\r\n// }\r\n\r\n\r\n// return(\r\n// <div className=\"container\">\r\n\r\n    \r\n//   <table>\r\n//   <h1 >turn: {turn}</h1>\r\n//     <tbody>\r\n//         <tr>\r\n//         <Cell num={0}/>\r\n//         <Cell num={1}/>\r\n//         <Cell num={2}/>\r\n//         </tr>\r\n//         <tr>\r\n//         <Cell num={3}/>\r\n//         <Cell num={4}/>\r\n//         <Cell num={5}/>\r\n//         </tr>\r\n//         <tr>\r\n//         <Cell num={6}/>\r\n//         <Cell num={7}/>\r\n//         <Cell num={8}/>\r\n//         </tr>\r\n//         </tbody>  \r\n//       </table>  \r\n//       {winner && (<>\r\n//       <p>{winner} is the winner</p>\r\n//       <button>PLAY AGAIN</button>\r\n//        </>) }\r\n// </div>\r\n\r\n// )\r\n// }\r\n// export default TicTacToe","\nimport './App.css';\nimport TicTacToe from './Tictactoe';\nimport React  from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicTacToe />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}